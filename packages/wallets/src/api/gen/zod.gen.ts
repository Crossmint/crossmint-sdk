// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zCreateSignatureRequestDto = z.union([
    z.object({
        type: z.enum([
            'evm-message'
        ]),
        params: z.object({
            message: z.string(),
            signer: z.string().optional(),
            chain: z.enum([
                'arbitrum-sepolia',
                'avalanche-fuji',
                'curtis',
                'barret-testnet',
                'base-goerli',
                'base-sepolia',
                'bsc-testnet',
                'chiliz-spicy-testnet',
                'ethereum-goerli',
                'ethereum-sepolia',
                'hypersonic-testnet',
                'lightlink-pegasus',
                'optimism-goerli',
                'optimism-sepolia',
                'polygon-amoy',
                'polygon-mumbai',
                'crossmint-private-testnet-ethereum',
                'crossmint-private-testnet-polygon',
                'rari-testnet',
                'scroll-sepolia',
                'sei-atlantic-2-testnet',
                'shape-sepolia',
                'skale-nebula-testnet',
                'soneium-minato-testnet',
                'space-testnet',
                'story-testnet',
                'verify-testnet',
                'viction-testnet',
                'xai-sepolia-testnet',
                'zkatana',
                'zkyoto',
                'zora-goerli',
                'zora-sepolia',
                'mode-sepolia',
                'zenchain-testnet',
                'ethereum',
                'polygon',
                'bsc',
                'optimism',
                'arbitrum',
                'base',
                'zora',
                'arbitrumnova',
                'astar-zkevm',
                'apechain',
                'apex',
                'boss',
                'lightlink',
                'skale-nebula',
                'sei-pacific-1',
                'chiliz',
                'avalanche',
                'xai',
                'shape',
                'rari',
                'scroll',
                'viction',
                'mode',
                'space',
                'soneium'
            ])
        })
    }),
    z.object({
        type: z.enum([
            'solana-message'
        ]),
        params: z.object({
            message: z.string()
        })
    }),
    z.object({
        type: z.enum([
            'evm-typed-data'
        ]),
        params: z.object({
            typedData: z.object({
                domain: z.object({
                    name: z.string(),
                    version: z.string(),
                    chainId: z.number(),
                    verifyingContract: z.string(),
                    salt: z.string().optional()
                }),
                types: z.object({}),
                primaryType: z.string(),
                message: z.object({})
            }),
            chain: z.enum([
                'arbitrum-sepolia',
                'avalanche-fuji',
                'curtis',
                'barret-testnet',
                'base-goerli',
                'base-sepolia',
                'bsc-testnet',
                'chiliz-spicy-testnet',
                'ethereum-goerli',
                'ethereum-sepolia',
                'hypersonic-testnet',
                'lightlink-pegasus',
                'optimism-goerli',
                'optimism-sepolia',
                'polygon-amoy',
                'polygon-mumbai',
                'crossmint-private-testnet-ethereum',
                'crossmint-private-testnet-polygon',
                'rari-testnet',
                'scroll-sepolia',
                'sei-atlantic-2-testnet',
                'shape-sepolia',
                'skale-nebula-testnet',
                'soneium-minato-testnet',
                'space-testnet',
                'story-testnet',
                'verify-testnet',
                'viction-testnet',
                'xai-sepolia-testnet',
                'zkatana',
                'zkyoto',
                'zora-goerli',
                'zora-sepolia',
                'mode-sepolia',
                'zenchain-testnet',
                'ethereum',
                'polygon',
                'bsc',
                'optimism',
                'arbitrum',
                'base',
                'zora',
                'arbitrumnova',
                'astar-zkevm',
                'apechain',
                'apex',
                'boss',
                'lightlink',
                'skale-nebula',
                'sei-pacific-1',
                'chiliz',
                'avalanche',
                'xai',
                'shape',
                'rari',
                'scroll',
                'viction',
                'mode',
                'space',
                'soneium'
            ]),
            signer: z.string().optional(),
            isSmartWalletSignature: z.boolean().optional()
        })
    })
]);

export const zCreateSignerInputDto = z.union([
    z.object({
        signer: z.string(),
        chain: z.enum([
            'base',
            'polygon',
            'optimism',
            'arbitrum',
            'mode',
            'base-sepolia',
            'polygon-amoy',
            'optimism-sepolia',
            'arbitrum-sepolia',
            'mode-sepolia',
            'story-testnet'
        ]),
        expiresAt: z.number().optional(),
        permissions: z.array(z.unknown()).optional()
    }),
    z.object({
        signer: z.string()
    })
]);

export const zCreateTransactionDto = z.object({
    params: z.union([
        z.object({
            calls: z.array(z.unknown()),
            chain: z.enum([
                'base',
                'polygon',
                'optimism',
                'arbitrum',
                'mode',
                'base-sepolia',
                'polygon-amoy',
                'optimism-sepolia',
                'arbitrum-sepolia',
                'mode-sepolia',
                'story-testnet'
            ]),
            signer: z.string().optional()
        }),
        z.object({
            transaction: z.string(),
            requiredSigners: z.array(z.string()).optional()
        }),
        z.object({
            call: z.union([
                z.object({
                    to: z.string(),
                    data: z.unknown()
                }),
                z.object({
                    address: z.string(),
                    functionName: z.string(),
                    abi: z.array(z.unknown()),
                    args: z.array(z.unknown())
                })
            ]),
            chain: z.enum([
                'arbitrum-sepolia',
                'avalanche-fuji',
                'curtis',
                'barret-testnet',
                'base-goerli',
                'base-sepolia',
                'bsc-testnet',
                'chiliz-spicy-testnet',
                'ethereum-goerli',
                'ethereum-sepolia',
                'hypersonic-testnet',
                'lightlink-pegasus',
                'optimism-goerli',
                'optimism-sepolia',
                'polygon-amoy',
                'polygon-mumbai',
                'crossmint-private-testnet-ethereum',
                'crossmint-private-testnet-polygon',
                'rari-testnet',
                'scroll-sepolia',
                'sei-atlantic-2-testnet',
                'shape-sepolia',
                'skale-nebula-testnet',
                'soneium-minato-testnet',
                'space-testnet',
                'story-testnet',
                'verify-testnet',
                'viction-testnet',
                'xai-sepolia-testnet',
                'zkatana',
                'zkyoto',
                'zora-goerli',
                'zora-sepolia',
                'mode-sepolia',
                'zenchain-testnet',
                'ethereum',
                'polygon',
                'bsc',
                'optimism',
                'arbitrum',
                'base',
                'zora',
                'arbitrumnova',
                'astar-zkevm',
                'apechain',
                'apex',
                'boss',
                'lightlink',
                'skale-nebula',
                'sei-pacific-1',
                'chiliz',
                'avalanche',
                'xai',
                'shape',
                'rari',
                'scroll',
                'viction',
                'mode',
                'space',
                'soneium'
            ])
        }),
        z.object({
            transaction: z.string(),
            requiredSigners: z.array(z.string()).optional(),
            signer: z.string().optional()
        })
    ])
});

export const zCreateWalletDto = z.union([
    z.object({
        type: z.enum([
            'evm-smart-wallet'
        ]),
        config: z.object({
            adminSigner: z.union([
                z.object({
                    type: z.enum([
                        'evm-keypair'
                    ]),
                    address: z.string()
                }),
                z.object({
                    type: z.enum([
                        'evm-fireblocks-custodial'
                    ])
                }),
                z.object({
                    type: z.enum([
                        'evm-passkey'
                    ]),
                    id: z.string(),
                    name: z.string(),
                    publicKey: z.object({
                        x: z.string(),
                        y: z.string()
                    })
                })
            ]),
            creationSeed: z.string().optional()
        }).optional().default({
            adminSigner: {
                type: 'evm-fireblocks-custodial'
            }
        }),
        linkedUser: z.string().optional()
    }),
    z.object({
        type: z.enum([
            'solana-mpc-wallet'
        ]),
        config: z.unknown().optional(),
        linkedUser: z.string().optional()
    }),
    z.object({
        type: z.enum([
            'solana-smart-wallet'
        ]),
        config: z.object({
            adminSigner: z.union([
                z.object({
                    type: z.enum([
                        'solana-keypair'
                    ]),
                    address: z.string().regex(/^[1-9A-HJ-NP-Za-km-z]{32,44}$/)
                }),
                z.object({
                    type: z.enum([
                        'solana-fireblocks-custodial'
                    ])
                })
            ]).optional()
        }).optional().default({
            adminSigner: {
                type: 'solana-fireblocks-custodial'
            }
        }),
        linkedUser: z.string().optional()
    }),
    z.object({
        type: z.enum([
            'aptos-mpc-wallet'
        ]),
        config: z.unknown().optional(),
        linkedUser: z.string().optional()
    }),
    z.object({
        type: z.enum([
            'cardano-mpc-wallet'
        ]),
        config: z.unknown().optional(),
        linkedUser: z.string().optional()
    }),
    z.object({
        type: z.enum([
            'sui-mpc-wallet'
        ]),
        config: z.unknown().optional(),
        linkedUser: z.string().optional()
    }),
    z.object({
        type: z.enum([
            'solana-custodial-wallet'
        ]),
        config: z.unknown().optional(),
        linkedUser: z.string().optional()
    }),
    z.object({
        type: z.enum([
            'evm-mpc-wallet'
        ]),
        config: z.unknown().optional(),
        linkedUser: z.string().optional()
    })
]);

export const zDelegatedSignerDto = z.union([
    z.object({
        type: z.enum([
            'evm-keypair',
            'evm-fireblocks-custodial'
        ]),
        address: z.string(),
        locator: z.string(),
        expiresAt: z.number().optional(),
        permissions: z.array(z.unknown()).optional(),
        chains: z.object({}).optional()
    }),
    z.object({
        type: z.enum([
            'solana-keypair',
            'solana-fireblocks-custodial'
        ]),
        address: z.string().regex(/^[1-9A-HJ-NP-Za-km-z]{32,44}$/),
        locator: z.string(),
        transaction: z.object({
            onChain: z.object({
                transaction: z.string(),
                lastValidBlockHeight: z.number().optional(),
                txId: z.string().optional()
            }),
            id: z.string(),
            status: z.enum([
                'awaiting-approval',
                'pending',
                'failed',
                'success'
            ]),
            approvals: z.object({
                pending: z.array(z.object({
                    signer: z.string(),
                    message: z.string()
                })),
                submitted: z.array(z.object({
                    signature: z.string(),
                    submittedAt: z.number(),
                    signer: z.string(),
                    message: z.string(),
                    metadata: z.object({
                        deviceInfo: z.string().optional(),
                        ipAddress: z.string().optional(),
                        userAgent: z.string().optional()
                    }).optional()
                })),
                required: z.number().optional()
            }).optional(),
            createdAt: z.number(),
            completedAt: z.number().optional(),
            error: z.union([
                z.object({
                    reason: z.enum([
                        'program_error'
                    ]),
                    message: z.string(),
                    logs: z.unknown().optional()
                }),
                z.object({
                    reason: z.enum([
                        'execution_reverted'
                    ]),
                    message: z.string(),
                    revert: z.object({
                        type: z.enum([
                            'contract_call',
                            'wallet_authorization',
                            'wallet_deployment'
                        ]),
                        reason: z.string(),
                        reasonData: z.string().optional(),
                        explorerLink: z.string().optional(),
                        simulationLink: z.string().optional()
                    }).optional()
                })
            ]).optional()
        })
    })
]);

export const zFundWalletAmountDto = z.object({
    amount: z.number().gte(1).lte(100),
    token: z.enum([
        'ape',
        'eth',
        'matic',
        'pol',
        'sei',
        'chz',
        'avax',
        'xai',
        'fuel',
        'vic',
        'ip',
        'zcx',
        'usdc',
        'usdce',
        'busd',
        'usdxm',
        'weth',
        'degen',
        'brett',
        'toshi',
        'eurc',
        'superverse',
        'bonk',
        'wif',
        'mother',
        'trump',
        'melania',
        'sol',
        'ada',
        'bnb',
        'sui',
        'apt',
        'sfuel'
    ]),
    chain: z.union([
        z.literal('arbitrum-sepolia'),
        z.literal('avalanche-fuji'),
        z.literal('base-sepolia'),
        z.literal('barret-testnet'),
        z.literal('ethereum-sepolia'),
        z.literal('optimism-sepolia'),
        z.literal('polygon-amoy'),
        z.literal('sei-atlantic-2-testnet'),
        z.literal('skale-nebula-testnet'),
        z.literal('soneium-minato-testnet'),
        z.literal('viction-testnet'),
        z.enum([
            'solana'
        ])
    ]).optional()
});

export const zSendTokenDto = z.object({
    recipient: z.unknown(),
    signer: z.string().optional(),
    token: z.string(),
    amount: z.string().optional()
});

export const zSubmitApprovalDto = z.object({
    approvals: z.union([
        z.object({
            signer: z.string(),
            signature: z.string()
        }),
        z.object({
            signer: z.string(),
            signature: z.object({
                r: z.string(),
                s: z.string()
            }),
            metadata: z.object({
                authenticatorData: z.string(),
                challengeIndex: z.number(),
                clientDataJSON: z.string(),
                typeIndex: z.number(),
                userVerificationRequired: z.boolean()
            })
        }),
        z.array(z.object({
            signer: z.string(),
            signature: z.string()
        })).min(1)
    ])
});

export const zWalletBalanceResponseDto = z.array(z.object({
    token: z.enum([
        'ape',
        'eth',
        'matic',
        'pol',
        'sei',
        'chz',
        'avax',
        'xai',
        'fuel',
        'vic',
        'ip',
        'zcx',
        'usdc',
        'usdce',
        'busd',
        'usdxm',
        'weth',
        'degen',
        'brett',
        'toshi',
        'eurc',
        'superverse',
        'bonk',
        'wif',
        'mother',
        'trump',
        'melania',
        'sol',
        'ada',
        'bnb',
        'sui',
        'apt',
        'sfuel'
    ]),
    decimals: z.number(),
    balances: z.object({})
}));

export const zWalletsV1Alpha2MultipleSignatureResponseDto = z.object({
    signatures: z.array(z.object({
        id: z.string(),
        type: z.enum([
            'evm-message',
            'solana-message',
            'evm-typed-data',
            'aptos-message',
            'cardano-message',
            'sui-message'
        ]),
        status: z.enum([
            'awaiting-approval',
            'pending',
            'failed',
            'success'
        ]),
        params: z.union([
            z.object({
                message: z.string(),
                signer: z.string().optional(),
                chain: z.enum([
                    'arbitrum-sepolia',
                    'avalanche-fuji',
                    'curtis',
                    'barret-testnet',
                    'base-goerli',
                    'base-sepolia',
                    'bsc-testnet',
                    'chiliz-spicy-testnet',
                    'ethereum-goerli',
                    'ethereum-sepolia',
                    'hypersonic-testnet',
                    'lightlink-pegasus',
                    'optimism-goerli',
                    'optimism-sepolia',
                    'polygon-amoy',
                    'polygon-mumbai',
                    'crossmint-private-testnet-ethereum',
                    'crossmint-private-testnet-polygon',
                    'rari-testnet',
                    'scroll-sepolia',
                    'sei-atlantic-2-testnet',
                    'shape-sepolia',
                    'skale-nebula-testnet',
                    'soneium-minato-testnet',
                    'space-testnet',
                    'story-testnet',
                    'verify-testnet',
                    'viction-testnet',
                    'xai-sepolia-testnet',
                    'zkatana',
                    'zkyoto',
                    'zora-goerli',
                    'zora-sepolia',
                    'mode-sepolia',
                    'zenchain-testnet',
                    'ethereum',
                    'polygon',
                    'bsc',
                    'optimism',
                    'arbitrum',
                    'base',
                    'zora',
                    'arbitrumnova',
                    'astar-zkevm',
                    'apechain',
                    'apex',
                    'boss',
                    'lightlink',
                    'skale-nebula',
                    'sei-pacific-1',
                    'chiliz',
                    'avalanche',
                    'xai',
                    'shape',
                    'rari',
                    'scroll',
                    'viction',
                    'mode',
                    'space',
                    'soneium'
                ])
            }),
            z.object({
                message: z.string()
            }),
            z.object({
                typedData: z.object({
                    domain: z.object({
                        name: z.string(),
                        version: z.string(),
                        chainId: z.number(),
                        verifyingContract: z.string(),
                        salt: z.string().optional()
                    }),
                    types: z.object({}),
                    primaryType: z.string(),
                    message: z.object({})
                }),
                chain: z.enum([
                    'arbitrum-sepolia',
                    'avalanche-fuji',
                    'curtis',
                    'barret-testnet',
                    'base-goerli',
                    'base-sepolia',
                    'bsc-testnet',
                    'chiliz-spicy-testnet',
                    'ethereum-goerli',
                    'ethereum-sepolia',
                    'hypersonic-testnet',
                    'lightlink-pegasus',
                    'optimism-goerli',
                    'optimism-sepolia',
                    'polygon-amoy',
                    'polygon-mumbai',
                    'crossmint-private-testnet-ethereum',
                    'crossmint-private-testnet-polygon',
                    'rari-testnet',
                    'scroll-sepolia',
                    'sei-atlantic-2-testnet',
                    'shape-sepolia',
                    'skale-nebula-testnet',
                    'soneium-minato-testnet',
                    'space-testnet',
                    'story-testnet',
                    'verify-testnet',
                    'viction-testnet',
                    'xai-sepolia-testnet',
                    'zkatana',
                    'zkyoto',
                    'zora-goerli',
                    'zora-sepolia',
                    'mode-sepolia',
                    'zenchain-testnet',
                    'ethereum',
                    'polygon',
                    'bsc',
                    'optimism',
                    'arbitrum',
                    'base',
                    'zora',
                    'arbitrumnova',
                    'astar-zkevm',
                    'apechain',
                    'apex',
                    'boss',
                    'lightlink',
                    'skale-nebula',
                    'sei-pacific-1',
                    'chiliz',
                    'avalanche',
                    'xai',
                    'shape',
                    'rari',
                    'scroll',
                    'viction',
                    'mode',
                    'space',
                    'soneium'
                ]),
                signer: z.string().optional(),
                isSmartWalletSignature: z.boolean().optional()
            })
        ]),
        approvals: z.object({
            pending: z.array(z.object({
                signer: z.string(),
                message: z.string()
            })),
            submitted: z.array(z.object({
                signature: z.string(),
                submittedAt: z.number(),
                signer: z.string(),
                message: z.string(),
                metadata: z.object({
                    deviceInfo: z.string().optional(),
                    ipAddress: z.string().optional(),
                    userAgent: z.string().optional()
                }).optional()
            })),
            required: z.number().optional()
        }).optional(),
        createdAt: z.number(),
        completedAt: z.number().optional(),
        error: z.unknown().optional(),
        outputSignature: z.string().optional()
    }))
});

export const zWalletsV1Alpha2SignatureResponseDto = z.object({
    id: z.string(),
    type: z.enum([
        'evm-message',
        'solana-message',
        'evm-typed-data',
        'aptos-message',
        'cardano-message',
        'sui-message'
    ]),
    status: z.enum([
        'awaiting-approval',
        'pending',
        'failed',
        'success'
    ]),
    params: z.union([
        z.object({
            message: z.string(),
            signer: z.string().optional(),
            chain: z.enum([
                'arbitrum-sepolia',
                'avalanche-fuji',
                'curtis',
                'barret-testnet',
                'base-goerli',
                'base-sepolia',
                'bsc-testnet',
                'chiliz-spicy-testnet',
                'ethereum-goerli',
                'ethereum-sepolia',
                'hypersonic-testnet',
                'lightlink-pegasus',
                'optimism-goerli',
                'optimism-sepolia',
                'polygon-amoy',
                'polygon-mumbai',
                'crossmint-private-testnet-ethereum',
                'crossmint-private-testnet-polygon',
                'rari-testnet',
                'scroll-sepolia',
                'sei-atlantic-2-testnet',
                'shape-sepolia',
                'skale-nebula-testnet',
                'soneium-minato-testnet',
                'space-testnet',
                'story-testnet',
                'verify-testnet',
                'viction-testnet',
                'xai-sepolia-testnet',
                'zkatana',
                'zkyoto',
                'zora-goerli',
                'zora-sepolia',
                'mode-sepolia',
                'zenchain-testnet',
                'ethereum',
                'polygon',
                'bsc',
                'optimism',
                'arbitrum',
                'base',
                'zora',
                'arbitrumnova',
                'astar-zkevm',
                'apechain',
                'apex',
                'boss',
                'lightlink',
                'skale-nebula',
                'sei-pacific-1',
                'chiliz',
                'avalanche',
                'xai',
                'shape',
                'rari',
                'scroll',
                'viction',
                'mode',
                'space',
                'soneium'
            ])
        }),
        z.object({
            message: z.string()
        }),
        z.object({
            typedData: z.object({
                domain: z.object({
                    name: z.string(),
                    version: z.string(),
                    chainId: z.number(),
                    verifyingContract: z.string(),
                    salt: z.string().optional()
                }),
                types: z.object({}),
                primaryType: z.string(),
                message: z.object({})
            }),
            chain: z.enum([
                'arbitrum-sepolia',
                'avalanche-fuji',
                'curtis',
                'barret-testnet',
                'base-goerli',
                'base-sepolia',
                'bsc-testnet',
                'chiliz-spicy-testnet',
                'ethereum-goerli',
                'ethereum-sepolia',
                'hypersonic-testnet',
                'lightlink-pegasus',
                'optimism-goerli',
                'optimism-sepolia',
                'polygon-amoy',
                'polygon-mumbai',
                'crossmint-private-testnet-ethereum',
                'crossmint-private-testnet-polygon',
                'rari-testnet',
                'scroll-sepolia',
                'sei-atlantic-2-testnet',
                'shape-sepolia',
                'skale-nebula-testnet',
                'soneium-minato-testnet',
                'space-testnet',
                'story-testnet',
                'verify-testnet',
                'viction-testnet',
                'xai-sepolia-testnet',
                'zkatana',
                'zkyoto',
                'zora-goerli',
                'zora-sepolia',
                'mode-sepolia',
                'zenchain-testnet',
                'ethereum',
                'polygon',
                'bsc',
                'optimism',
                'arbitrum',
                'base',
                'zora',
                'arbitrumnova',
                'astar-zkevm',
                'apechain',
                'apex',
                'boss',
                'lightlink',
                'skale-nebula',
                'sei-pacific-1',
                'chiliz',
                'avalanche',
                'xai',
                'shape',
                'rari',
                'scroll',
                'viction',
                'mode',
                'space',
                'soneium'
            ]),
            signer: z.string().optional(),
            isSmartWalletSignature: z.boolean().optional()
        })
    ]),
    approvals: z.object({
        pending: z.array(z.object({
            signer: z.string(),
            message: z.string()
        })),
        submitted: z.array(z.object({
            signature: z.string(),
            submittedAt: z.number(),
            signer: z.string(),
            message: z.string(),
            metadata: z.object({
                deviceInfo: z.string().optional(),
                ipAddress: z.string().optional(),
                userAgent: z.string().optional()
            }).optional()
        })),
        required: z.number().optional()
    }).optional(),
    createdAt: z.number(),
    completedAt: z.number().optional(),
    error: z.unknown().optional(),
    outputSignature: z.string().optional()
});

export const zWalletsV1Alpha2TransactionResponseDto = z.union([
    z.object({
        walletType: z.enum([
            'evm-smart-wallet'
        ]),
        params: z.object({
            calls: z.array(z.unknown()),
            chain: z.enum([
                'base',
                'polygon',
                'optimism',
                'arbitrum',
                'mode',
                'base-sepolia',
                'polygon-amoy',
                'optimism-sepolia',
                'arbitrum-sepolia',
                'mode-sepolia',
                'story-testnet'
            ]),
            signer: z.string().optional()
        }),
        onChain: z.object({
            userOperation: z.object({
                sender: z.string(),
                nonce: z.string(),
                callData: z.string(),
                callGasLimit: z.string(),
                verificationGasLimit: z.string(),
                preVerificationGas: z.string(),
                maxFeePerGas: z.string(),
                maxPriorityFeePerGas: z.string(),
                paymaster: z.string().optional(),
                paymasterVerificationGasLimit: z.string().optional(),
                paymasterData: z.string().optional(),
                paymasterPostOpGasLimit: z.string().optional(),
                signature: z.string(),
                factory: z.string().optional(),
                factoryData: z.string().optional()
            }),
            userOperationHash: z.string(),
            txId: z.string().optional(),
            explorerLink: z.string().optional()
        }),
        id: z.string(),
        status: z.enum([
            'awaiting-approval',
            'pending',
            'failed',
            'success'
        ]),
        approvals: z.object({
            pending: z.array(z.object({
                signer: z.string(),
                message: z.string()
            })),
            submitted: z.array(z.object({
                signature: z.string(),
                submittedAt: z.number(),
                signer: z.string(),
                message: z.string(),
                metadata: z.object({
                    deviceInfo: z.string().optional(),
                    ipAddress: z.string().optional(),
                    userAgent: z.string().optional()
                }).optional()
            })),
            required: z.number().optional()
        }).optional(),
        createdAt: z.number(),
        completedAt: z.number().optional(),
        error: z.union([
            z.object({
                reason: z.enum([
                    'program_error'
                ]),
                message: z.string(),
                logs: z.unknown().optional()
            }),
            z.object({
                reason: z.enum([
                    'execution_reverted'
                ]),
                message: z.string(),
                revert: z.object({
                    type: z.enum([
                        'contract_call',
                        'wallet_authorization',
                        'wallet_deployment'
                    ]),
                    reason: z.string(),
                    reasonData: z.string().optional(),
                    explorerLink: z.string().optional(),
                    simulationLink: z.string().optional()
                }).optional()
            })
        ]).optional()
    }),
    z.object({
        walletType: z.enum([
            'solana-mpc-wallet'
        ]),
        params: z.object({
            transaction: z.string(),
            requiredSigners: z.array(z.string()).optional()
        }),
        onChain: z.object({
            transaction: z.string(),
            lastValidBlockHeight: z.number().optional(),
            txId: z.string().optional()
        }),
        id: z.string(),
        status: z.enum([
            'awaiting-approval',
            'pending',
            'failed',
            'success'
        ]),
        approvals: z.object({
            pending: z.array(z.object({
                signer: z.string(),
                message: z.string()
            })),
            submitted: z.array(z.object({
                signature: z.string(),
                submittedAt: z.number(),
                signer: z.string(),
                message: z.string(),
                metadata: z.object({
                    deviceInfo: z.string().optional(),
                    ipAddress: z.string().optional(),
                    userAgent: z.string().optional()
                }).optional()
            })),
            required: z.number().optional()
        }).optional(),
        createdAt: z.number(),
        completedAt: z.number().optional(),
        error: z.union([
            z.object({
                reason: z.enum([
                    'program_error'
                ]),
                message: z.string(),
                logs: z.unknown().optional()
            }),
            z.object({
                reason: z.enum([
                    'execution_reverted'
                ]),
                message: z.string(),
                revert: z.object({
                    type: z.enum([
                        'contract_call',
                        'wallet_authorization',
                        'wallet_deployment'
                    ]),
                    reason: z.string(),
                    reasonData: z.string().optional(),
                    explorerLink: z.string().optional(),
                    simulationLink: z.string().optional()
                }).optional()
            })
        ]).optional()
    }),
    z.object({
        walletType: z.enum([
            'evm-mpc-wallet'
        ]),
        params: z.object({
            call: z.union([
                z.object({
                    to: z.string(),
                    data: z.unknown()
                }),
                z.object({
                    address: z.string(),
                    functionName: z.string(),
                    abi: z.array(z.unknown()),
                    args: z.array(z.unknown())
                })
            ]),
            chain: z.enum([
                'arbitrum-sepolia',
                'avalanche-fuji',
                'curtis',
                'barret-testnet',
                'base-goerli',
                'base-sepolia',
                'bsc-testnet',
                'chiliz-spicy-testnet',
                'ethereum-goerli',
                'ethereum-sepolia',
                'hypersonic-testnet',
                'lightlink-pegasus',
                'optimism-goerli',
                'optimism-sepolia',
                'polygon-amoy',
                'polygon-mumbai',
                'crossmint-private-testnet-ethereum',
                'crossmint-private-testnet-polygon',
                'rari-testnet',
                'scroll-sepolia',
                'sei-atlantic-2-testnet',
                'shape-sepolia',
                'skale-nebula-testnet',
                'soneium-minato-testnet',
                'space-testnet',
                'story-testnet',
                'verify-testnet',
                'viction-testnet',
                'xai-sepolia-testnet',
                'zkatana',
                'zkyoto',
                'zora-goerli',
                'zora-sepolia',
                'mode-sepolia',
                'zenchain-testnet',
                'ethereum',
                'polygon',
                'bsc',
                'optimism',
                'arbitrum',
                'base',
                'zora',
                'arbitrumnova',
                'astar-zkevm',
                'apechain',
                'apex',
                'boss',
                'lightlink',
                'skale-nebula',
                'sei-pacific-1',
                'chiliz',
                'avalanche',
                'xai',
                'shape',
                'rari',
                'scroll',
                'viction',
                'mode',
                'space',
                'soneium'
            ])
        }),
        onChain: z.object({
            call: z.object({
                to: z.string(),
                data: z.unknown()
            }),
            txId: z.string().optional(),
            explorerLink: z.string().optional()
        }),
        id: z.string(),
        status: z.enum([
            'awaiting-approval',
            'pending',
            'failed',
            'success'
        ]),
        approvals: z.object({
            pending: z.array(z.object({
                signer: z.string(),
                message: z.string()
            })),
            submitted: z.array(z.object({
                signature: z.string(),
                submittedAt: z.number(),
                signer: z.string(),
                message: z.string(),
                metadata: z.object({
                    deviceInfo: z.string().optional(),
                    ipAddress: z.string().optional(),
                    userAgent: z.string().optional()
                }).optional()
            })),
            required: z.number().optional()
        }).optional(),
        createdAt: z.number(),
        completedAt: z.number().optional(),
        error: z.union([
            z.object({
                reason: z.enum([
                    'program_error'
                ]),
                message: z.string(),
                logs: z.unknown().optional()
            }),
            z.object({
                reason: z.enum([
                    'execution_reverted'
                ]),
                message: z.string(),
                revert: z.object({
                    type: z.enum([
                        'contract_call',
                        'wallet_authorization',
                        'wallet_deployment'
                    ]),
                    reason: z.string(),
                    reasonData: z.string().optional(),
                    explorerLink: z.string().optional(),
                    simulationLink: z.string().optional()
                }).optional()
            })
        ]).optional()
    }),
    z.object({
        walletType: z.enum([
            'solana-smart-wallet'
        ]),
        params: z.object({
            transaction: z.string(),
            requiredSigners: z.array(z.string()).optional(),
            signer: z.string().optional()
        }),
        onChain: z.object({
            transaction: z.string(),
            lastValidBlockHeight: z.number().optional(),
            txId: z.string().optional()
        }),
        id: z.string(),
        status: z.enum([
            'awaiting-approval',
            'pending',
            'failed',
            'success'
        ]),
        approvals: z.object({
            pending: z.array(z.object({
                signer: z.string(),
                message: z.string()
            })),
            submitted: z.array(z.object({
                signature: z.string(),
                submittedAt: z.number(),
                signer: z.string(),
                message: z.string(),
                metadata: z.object({
                    deviceInfo: z.string().optional(),
                    ipAddress: z.string().optional(),
                    userAgent: z.string().optional()
                }).optional()
            })),
            required: z.number().optional()
        }).optional(),
        createdAt: z.number(),
        completedAt: z.number().optional(),
        error: z.union([
            z.object({
                reason: z.enum([
                    'program_error'
                ]),
                message: z.string(),
                logs: z.unknown().optional()
            }),
            z.object({
                reason: z.enum([
                    'execution_reverted'
                ]),
                message: z.string(),
                revert: z.object({
                    type: z.enum([
                        'contract_call',
                        'wallet_authorization',
                        'wallet_deployment'
                    ]),
                    reason: z.string(),
                    reasonData: z.string().optional(),
                    explorerLink: z.string().optional(),
                    simulationLink: z.string().optional()
                }).optional()
            })
        ]).optional()
    })
]);

export const zWalletsV1Alpha2TransactionsResponseDto = z.object({
    transactions: z.array(z.unknown())
});

export const zWalletV1Alpha2ErrorDto = z.object({
    error: z.unknown(),
    message: z.string()
});

export const zWalletV1Alpha2ResponseDto = z.union([
    z.object({
        type: z.enum([
            'evm-smart-wallet'
        ]),
        config: z.object({
            adminSigner: z.union([
                z.object({
                    type: z.enum([
                        'evm-keypair'
                    ]),
                    address: z.string(),
                    locator: z.string()
                }),
                z.object({
                    type: z.enum([
                        'evm-fireblocks-custodial'
                    ]),
                    address: z.string(),
                    locator: z.string()
                }),
                z.object({
                    type: z.enum([
                        'evm-passkey'
                    ]),
                    id: z.string(),
                    name: z.string(),
                    publicKey: z.object({
                        x: z.string(),
                        y: z.string()
                    }),
                    validatorContractVersion: z.string(),
                    locator: z.string()
                })
            ]),
            delegatedSigners: z.array(z.unknown()).optional()
        }),
        address: z.string(),
        linkedUser: z.string().optional(),
        createdAt: z.number().optional()
    }),
    z.object({
        type: z.enum([
            'solana-smart-wallet'
        ]),
        config: z.object({
            adminSigner: z.union([
                z.object({
                    type: z.enum([
                        'solana-keypair'
                    ]),
                    address: z.string().regex(/^[1-9A-HJ-NP-Za-km-z]{32,44}$/),
                    locator: z.string()
                }),
                z.object({
                    type: z.enum([
                        'solana-fireblocks-custodial'
                    ]),
                    address: z.string().regex(/^[1-9A-HJ-NP-Za-km-z]{32,44}$/),
                    locator: z.string()
                })
            ])
        }),
        address: z.string(),
        linkedUser: z.string().optional(),
        createdAt: z.number().optional()
    }),
    z.object({
        type: z.enum([
            'solana-mpc-wallet'
        ]),
        config: z.unknown().optional(),
        address: z.string(),
        linkedUser: z.string().optional(),
        createdAt: z.number().optional()
    }),
    z.object({
        type: z.enum([
            'aptos-mpc-wallet'
        ]),
        config: z.unknown().optional(),
        address: z.string(),
        linkedUser: z.string().optional(),
        createdAt: z.number().optional()
    }),
    z.object({
        type: z.enum([
            'cardano-mpc-wallet'
        ]),
        config: z.unknown().optional(),
        address: z.string(),
        linkedUser: z.string().optional(),
        createdAt: z.number().optional()
    }),
    z.object({
        type: z.enum([
            'sui-mpc-wallet'
        ]),
        config: z.unknown().optional(),
        address: z.string(),
        linkedUser: z.string().optional(),
        createdAt: z.number().optional()
    }),
    z.object({
        type: z.enum([
            'evm-mpc-wallet'
        ]),
        address: z.string(),
        linkedUser: z.string().optional(),
        createdAt: z.number().optional()
    })
]);

export const zWalletV1Alpha2TransactionErrorDto = z.object({
    error: z.union([
        z.object({
            reason: z.enum([
                'program_error'
            ]),
            message: z.string(),
            logs: z.unknown().optional()
        }),
        z.object({
            reason: z.enum([
                'execution_reverted'
            ]),
            message: z.string(),
            revert: z.object({
                type: z.enum([
                    'contract_call',
                    'wallet_authorization',
                    'wallet_deployment'
                ]),
                reason: z.string(),
                reasonData: z.string().optional(),
                explorerLink: z.string().optional(),
                simulationLink: z.string().optional()
            }).optional()
        })
    ]),
    message: z.string()
});

export const zNftevm = z.array(z.object({
    chain: z.string().optional(),
    contractAddress: z.string().optional(),
    tokenId: z.string().optional(),
    metadata: z.object({
        attributes: z.array(z.object({
            trait_type: z.string().optional(),
            value: z.string().optional(),
            display_type: z.union([
                z.string(),
                z.null()
            ]).optional()
        })).optional(),
        collection: z.object({}).optional(),
        description: z.string().optional(),
        image: z.string().optional(),
        animation_url: z.union([
            z.string(),
            z.null()
        ]).optional(),
        name: z.string().optional()
    }).optional(),
    locator: z.string().optional(),
    tokenStandard: z.string().optional(),
    subscription: z.object({
        expiresAt: z.string().datetime().optional()
    }).optional()
}));

export const zNftsol = z.array(z.object({
    chain: z.string().optional(),
    mintHash: z.string().optional(),
    metadata: z.object({
        name: z.string().optional(),
        description: z.string().optional(),
        image: z.string().optional(),
        attributes: z.array(z.object({
            value: z.union([
                z.string(),
                z.number(),
                z.boolean(),
                z.object({})
            ]).optional(),
            trait_type: z.string().optional()
        })).optional()
    }).optional(),
    locator: z.string().optional()
}));

export const zError = z.object({
    error: z.string().optional()
});

export const zWalletsV1ControllerSubmitMeApprovals4Response = zWalletsV1Alpha2TransactionResponseDto;

export const zWalletsV1ControllerGetMeTransaction4Response = zWalletsV1Alpha2TransactionResponseDto;

export const zWalletsV1ControllerCreateMeTransaction4Response = zWalletsV1Alpha2TransactionResponseDto;

export const zWalletsV1ControllerSubmitMeSignatureApprovals4Response = zWalletsV1Alpha2SignatureResponseDto;

export const zWalletsV1ControllerGetMeSignature4Response = zWalletsV1Alpha2SignatureResponseDto;

export const zWalletsV1ControllerCreateMeSignatureRequest4Response = zWalletsV1Alpha2SignatureResponseDto;

export const zWalletsV1ControllerGetMeWallet4Response = zWalletV1Alpha2ResponseDto;

export const zWalletsV1ControllerCreateMeWallet4Response = zWalletV1Alpha2ResponseDto;

export const zWalletsV1ControllerSubmitApprovals4Response = zWalletsV1Alpha2TransactionResponseDto;

export const zWalletsV1ControllerGetTransaction4Response = zWalletsV1Alpha2TransactionResponseDto;

export const zWalletsV1ControllerGetTransactionsWithoutChain4Response = zWalletsV1Alpha2TransactionsResponseDto;

export const zWalletsV1ControllerCreateTransaction4Response = zWalletsV1Alpha2TransactionResponseDto;

export const zWalletsV1ControllerGetDelegatedSigner4Response = zDelegatedSignerDto;

export const zWalletsV1ControllerCreateDelegatedSigner4Response = zDelegatedSignerDto;

export const zWalletsV1ControllerSubmitSignatureApprovals4Response = zWalletsV1Alpha2SignatureResponseDto;

export const zWalletsV1ControllerGetSignature4Response = zWalletsV1Alpha2SignatureResponseDto;

export const zWalletsV1ControllerGetAllSignatures4Response = zWalletsV1Alpha2MultipleSignatureResponseDto;

export const zWalletsV1ControllerCreateSignatureRequest4Response = zWalletsV1Alpha2SignatureResponseDto;

export const zWalletsV1ControllerGetWalletByLocator4Response = zWalletV1Alpha2ResponseDto;

export const zWalletsV1ControllerCreateWallet4Response = zWalletV1Alpha2ResponseDto;

export const zFetchContentFromWalletResponse = z.union([
    zNftevm,
    zNftsol
]);

export const zBalanceControllerGetBalanceForLocator2Response = zWalletBalanceResponseDto;

export const zBalanceControllerFundWallet2Response = zWalletBalanceResponseDto;