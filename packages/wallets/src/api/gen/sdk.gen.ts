// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { WalletsV1ControllerSubmitMeApprovals4Data, WalletsV1ControllerSubmitMeApprovals4Response, WalletsV1ControllerSubmitMeApprovals4Error, WalletsV1ControllerGetMeTransaction4Data, WalletsV1ControllerGetMeTransaction4Response, WalletsV1ControllerGetMeTransaction4Error, WalletsV1ControllerCreateMeTransaction4Data, WalletsV1ControllerCreateMeTransaction4Response, WalletsV1ControllerCreateMeTransaction4Error, WalletsV1ControllerSubmitMeSignatureApprovals4Data, WalletsV1ControllerSubmitMeSignatureApprovals4Response, WalletsV1ControllerSubmitMeSignatureApprovals4Error, WalletsV1ControllerGetMeSignature4Data, WalletsV1ControllerGetMeSignature4Response, WalletsV1ControllerGetMeSignature4Error, WalletsV1ControllerCreateMeSignatureRequest4Data, WalletsV1ControllerCreateMeSignatureRequest4Response, WalletsV1ControllerCreateMeSignatureRequest4Error, WalletsV1ControllerGetMeWallet4Data, WalletsV1ControllerGetMeWallet4Response, WalletsV1ControllerCreateMeWallet4Data, WalletsV1ControllerCreateMeWallet4Response, WalletsV1ControllerSubmitApprovals4Data, WalletsV1ControllerSubmitApprovals4Response, WalletsV1ControllerSubmitApprovals4Error, WalletsV1ControllerGetTransaction4Data, WalletsV1ControllerGetTransaction4Response, WalletsV1ControllerGetTransaction4Error, WalletsV1ControllerGetTransactionsWithoutChain4Data, WalletsV1ControllerGetTransactionsWithoutChain4Response, WalletsV1ControllerGetTransactionsWithoutChain4Error, WalletsV1ControllerCreateTransaction4Data, WalletsV1ControllerCreateTransaction4Response, WalletsV1ControllerCreateTransaction4Error, WalletsV1ControllerGetDelegatedSigner4Data, WalletsV1ControllerGetDelegatedSigner4Response, WalletsV1ControllerGetDelegatedSigner4Error, WalletsV1ControllerCreateDelegatedSigner4Data, WalletsV1ControllerCreateDelegatedSigner4Response, WalletsV1ControllerCreateDelegatedSigner4Error, WalletsV1ControllerSubmitSignatureApprovals4Data, WalletsV1ControllerSubmitSignatureApprovals4Response, WalletsV1ControllerSubmitSignatureApprovals4Error, WalletsV1ControllerGetSignature4Data, WalletsV1ControllerGetSignature4Response, WalletsV1ControllerGetSignature4Error, WalletsV1ControllerGetAllSignatures4Data, WalletsV1ControllerGetAllSignatures4Response, WalletsV1ControllerGetAllSignatures4Error, WalletsV1ControllerCreateSignatureRequest4Data, WalletsV1ControllerCreateSignatureRequest4Response, WalletsV1ControllerCreateSignatureRequest4Error, WalletsV1ControllerGetWalletByLocator4Data, WalletsV1ControllerGetWalletByLocator4Response, WalletsV1ControllerGetWalletByLocator4Error, WalletsV1ControllerCreateWallet4Data, WalletsV1ControllerCreateWallet4Response, WalletsV1ControllerCreateWallet4Error, FetchContentFromWalletData, FetchContentFromWalletResponse, FetchContentFromWalletError, BalanceControllerGetBalanceForLocator2Data, BalanceControllerGetBalanceForLocator2Response, BalanceControllerGetBalanceForLocator2Error, BalanceControllerFundWallet2Data, BalanceControllerFundWallet2Response, BalanceControllerFundWallet2Error } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Approve Transaction For Authenticated User
 * Submit approval signature for a pending transaction. Required for transactions using external signers.
 *
 * **API scope required**: `wallets:transactions.sign`
 */
export const walletsV1ControllerSubmitMeApprovals4 = <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerSubmitMeApprovals4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WalletsV1ControllerSubmitMeApprovals4Response, WalletsV1ControllerSubmitMeApprovals4Error, ThrowOnError>({
        url: '/2022-06-09/wallets/me{walletType}/transactions/{transactionId}/approvals',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Transaction For Authenticated User
 * Retrieves the current status and details of a specific transaction.
 *
 * **API scope required**: `wallets:transactions.read`
 */
export const walletsV1ControllerGetMeTransaction4 = <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetMeTransaction4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WalletsV1ControllerGetMeTransaction4Response, WalletsV1ControllerGetMeTransaction4Error, ThrowOnError>({
        url: '/2022-06-09/wallets/me{walletType}/transactions/{transactionId}',
        ...options
    });
};

/**
 * Create Transaction For Authenticated User
 * Creates a new transaction for the authenticated user. Transaction will be automatically broadcast once it has all necessary approvals.
 *
 * **API scope required**: `wallets:transactions.create`
 */
export const walletsV1ControllerCreateMeTransaction4 = <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateMeTransaction4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WalletsV1ControllerCreateMeTransaction4Response, WalletsV1ControllerCreateMeTransaction4Error, ThrowOnError>({
        url: '/2022-06-09/wallets/me{walletType}/transactions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Approve Signature For Authenticated User
 * Submit approval for a signature to sign a message or typed data.
 *
 * **API scope required**: `wallets:signatures.create`
 */
export const walletsV1ControllerSubmitMeSignatureApprovals4 = <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerSubmitMeSignatureApprovals4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WalletsV1ControllerSubmitMeSignatureApprovals4Response, WalletsV1ControllerSubmitMeSignatureApprovals4Error, ThrowOnError>({
        url: '/2022-06-09/wallets/me{walletType}/signatures/{signatureId}/approvals',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Signature For Authenticated User
 * Retrieves details about a specific signature by its ID.
 *
 * **API scope required**: `wallets:signatures.read`
 */
export const walletsV1ControllerGetMeSignature4 = <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetMeSignature4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WalletsV1ControllerGetMeSignature4Response, WalletsV1ControllerGetMeSignature4Error, ThrowOnError>({
        url: '/2022-06-09/wallets/me{walletType}/signatures/{signatureId}',
        ...options
    });
};

/**
 * Create Signature For Authenticated User
 * Creates a new signature for signing messages or typed data.
 *
 * **API scope required**: `wallets:signatures.create`
 */
export const walletsV1ControllerCreateMeSignatureRequest4 = <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateMeSignatureRequest4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WalletsV1ControllerCreateMeSignatureRequest4Response, WalletsV1ControllerCreateMeSignatureRequest4Error, ThrowOnError>({
        url: '/2022-06-09/wallets/me{walletType}/signatures',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Wallet For Authenticated User
 * Retrieves a wallet for the authenticated user.
 *
 * **API scope required**: `wallets.read`
 */
export const walletsV1ControllerGetMeWallet4 = <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetMeWallet4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WalletsV1ControllerGetMeWallet4Response, unknown, ThrowOnError>({
        url: '/2022-06-09/wallets/me{walletType}',
        ...options
    });
};

/**
 * Create Wallet For Authenticated User
 * Creates a new wallet of specified type for the authenticated user. If called for a user who already has a wallet, returns the existing wallet. Supports both custodial and non-custodial wallet types. Uses client-side API key authentication.
 *
 * **API scope required**: `wallets.create`
 */
export const walletsV1ControllerCreateMeWallet4 = <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateMeWallet4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WalletsV1ControllerCreateMeWallet4Response, unknown, ThrowOnError>({
        url: '/2022-06-09/wallets/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Approve Transaction
 * Submit approval signature for a pending transaction. Required for transactions using external signers.
 *
 * **API scope required**: `wallets:transactions.sign`
 */
export const walletsV1ControllerSubmitApprovals4 = <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerSubmitApprovals4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WalletsV1ControllerSubmitApprovals4Response, WalletsV1ControllerSubmitApprovals4Error, ThrowOnError>({
        url: '/2022-06-09/wallets/{walletLocator}/transactions/{transactionId}/approvals',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Transaction
 * Retrieves the current status and details of a specific transaction.
 *
 * **API scope required**: `wallets:transactions.read`
 */
export const walletsV1ControllerGetTransaction4 = <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetTransaction4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WalletsV1ControllerGetTransaction4Response, WalletsV1ControllerGetTransaction4Error, ThrowOnError>({
        url: '/2022-06-09/wallets/{walletLocator}/transactions/{transactionId}',
        ...options
    });
};

/**
 * Get Wallet Transactions
 * Retrieves all transactions associated with the specified wallet.
 *
 * **API scope required**: `wallets:transactions.read`
 */
export const walletsV1ControllerGetTransactionsWithoutChain4 = <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetTransactionsWithoutChain4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WalletsV1ControllerGetTransactionsWithoutChain4Response, WalletsV1ControllerGetTransactionsWithoutChain4Error, ThrowOnError>({
        url: '/2022-06-09/wallets/{walletLocator}/transactions',
        ...options
    });
};

/**
 * Create Transaction
 * Creates a new transaction for the specified wallet. Transaction will be automatically broadcast once it has all necessary approvals.
 *
 * **API scope required**: `wallets:transactions.create`
 */
export const walletsV1ControllerCreateTransaction4 = <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateTransaction4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WalletsV1ControllerCreateTransaction4Response, WalletsV1ControllerCreateTransaction4Error, ThrowOnError>({
        url: '/2022-06-09/wallets/{walletLocator}/transactions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Delegated Signer
 * Retrieve details about a specific delegated signer by its locator.
 *
 * **API scope required**: `wallets.read`
 */
export const walletsV1ControllerGetDelegatedSigner4 = <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetDelegatedSigner4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WalletsV1ControllerGetDelegatedSigner4Response, WalletsV1ControllerGetDelegatedSigner4Error, ThrowOnError>({
        url: '/2022-06-09/wallets/{walletLocator}/signers/{signer}',
        ...options
    });
};

/**
 * Register Delegated Signer
 * Register a delegated key for a smart wallet with optional restrictions around permissions and expiry date.
 *
 * **API scope required**: `wallets.create`
 */
export const walletsV1ControllerCreateDelegatedSigner4 = <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateDelegatedSigner4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WalletsV1ControllerCreateDelegatedSigner4Response, WalletsV1ControllerCreateDelegatedSigner4Error, ThrowOnError>({
        url: '/2022-06-09/wallets/{walletLocator}/signers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Approve Signature
 * Submit approval for a signature to sign a message or typed data.
 *
 * **API scope required**: `wallets:signatures.create`
 */
export const walletsV1ControllerSubmitSignatureApprovals4 = <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerSubmitSignatureApprovals4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WalletsV1ControllerSubmitSignatureApprovals4Response, WalletsV1ControllerSubmitSignatureApprovals4Error, ThrowOnError>({
        url: '/2022-06-09/wallets/{walletLocator}/signatures/{signatureId}/approvals',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Signature
 * Retrieves details about a specific signature by its ID.
 *
 * **API scope required**: `wallets:signatures.read`
 */
export const walletsV1ControllerGetSignature4 = <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetSignature4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WalletsV1ControllerGetSignature4Response, WalletsV1ControllerGetSignature4Error, ThrowOnError>({
        url: '/2022-06-09/wallets/{walletLocator}/signatures/{signatureId}',
        ...options
    });
};

/**
 * Get All Signatures
 * Retrieves all signatures associated with the specified wallet.
 *
 * **API scope required**: `wallets:signatures.read`
 */
export const walletsV1ControllerGetAllSignatures4 = <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetAllSignatures4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WalletsV1ControllerGetAllSignatures4Response, WalletsV1ControllerGetAllSignatures4Error, ThrowOnError>({
        url: '/2022-06-09/wallets/{walletLocator}/signatures',
        ...options
    });
};

/**
 * Create Signature
 * Creates a new signature for signing messages or typed data.
 *
 * **API scope required**: `wallets:signatures.create`
 */
export const walletsV1ControllerCreateSignatureRequest4 = <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateSignatureRequest4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WalletsV1ControllerCreateSignatureRequest4Response, WalletsV1ControllerCreateSignatureRequest4Error, ThrowOnError>({
        url: '/2022-06-09/wallets/{walletLocator}/signatures',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Wallet By Locator
 * Retrieves a wallet by its locator (address or user identifier and wallet type)
 *
 * **API scope required**: `wallets.read`
 */
export const walletsV1ControllerGetWalletByLocator4 = <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetWalletByLocator4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WalletsV1ControllerGetWalletByLocator4Response, WalletsV1ControllerGetWalletByLocator4Error, ThrowOnError>({
        url: '/2022-06-09/wallets/{walletLocator}',
        ...options
    });
};

/**
 * Create Wallet
 * Creates a new wallet of specified type. If called with an idempotency key or for a user who already has a wallet, returns existing wallet. When linkedUser is provided, subsequent calls with the same linkedUser will return the existing wallet. Supports both custodial and non-custodial wallet types.
 *
 * **API scope required**: `wallets.create`
 */
export const walletsV1ControllerCreateWallet4 = <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateWallet4Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WalletsV1ControllerCreateWallet4Response, WalletsV1ControllerCreateWallet4Error, ThrowOnError>({
        url: '/2022-06-09/wallets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get NFTs from Wallet
 * Fetch the NFTs in a provided wallet
 *
 * **API scope required**: `wallets:nfts.read`
 *
 */
export const fetchContentFromWallet = <ThrowOnError extends boolean = false>(options: Options<FetchContentFromWalletData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FetchContentFromWalletResponse, FetchContentFromWalletError, ThrowOnError>({
        url: '/2022-06-09/wallets/{identifier}/nfts',
        ...options
    });
};

/**
 * Get Wallet Balance
 * Get the balance of a wallet for a given chain and currency
 *
 * **API scope required**: `wallets:balance.read`
 */
export const balanceControllerGetBalanceForLocator2 = <ThrowOnError extends boolean = false>(options: Options<BalanceControllerGetBalanceForLocator2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BalanceControllerGetBalanceForLocator2Response, BalanceControllerGetBalanceForLocator2Error, ThrowOnError>({
        url: '/v1-alpha2/wallets/{walletLocator}/balances',
        ...options
    });
};

/**
 * Fund Wallet
 * Send funds to a wallet.
 *
 * **API scope required**: `wallets.fund`
 */
export const balanceControllerFundWallet2 = <ThrowOnError extends boolean = false>(options: Options<BalanceControllerFundWallet2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BalanceControllerFundWallet2Response, BalanceControllerFundWallet2Error, ThrowOnError>({
        url: '/v1-alpha2/wallets/{walletLocator}/balances',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};